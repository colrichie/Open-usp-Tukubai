#!/usr/bin/env python
#coding: utf-8
#
# self: select field (Open usp Tukubai)
# 
# designed by Nobuaki Tounaka
# written by Ryuichi Ueda
# 
# The MIT License
# 
# Copyright (C) 2011 Universal Shell Programming Laboratory
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

_usage = [ "self f1 f2 ... file", "self -d f1 f2 ... string" ]
_version = "Sat Apr 14 17:41:05 JST 2012"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4+, 3.1, 3.2/UTF-8)"

import re
import os
import sys
import codecs

def die(msg):
	sys.stderr.write( 'Error[self] : ' + msg + "\n")
	sys.exit(1)

def usage():
	sys.stderr.write("Usage     : "+ _usage[0] + "\n")
	sys.stderr.write("          : "+ _usage[1] + "\n")
	sys.stderr.write("Version   : "+ _version + "\n")
	sys.stderr.write("          : "+ _code + "\n")
	sys.exit(1)

def openReadFile(file_name):
	if file_name != "-":
		try:    return codecs.open(file_name,'r','utf-8')
		except: die("ファイルを開けません。")

	if sys.version_info[0] < 3:
		return codecs.getreader('utf-8')(sys.stdin)

	return codecs.getreader('utf-8')(sys.stdin.detach())

def resetStdout():
	if sys.version_info[0] < 3:
		return codecs.getwriter('utf-8')(sys.stdout)

	return codecs.getwriter('utf-8')(sys.stdout.detach())

class Params:
	def __init__(self,tokens):
		self.num = None
		self.nf = False
		self.start = None
		self.length = None

		if len(tokens) == 0:
			die("オプションが不正です。")
	
		#フィールド数の処理
		if tokens[0] != "NF":
			self.num = int(tokens[0])

		if len(tokens) == 1:	return

		#開始位置
		self.start = int(tokens[1])-1
		if len(tokens) == 2:	return

		#文字列の長さ
		self.length = int(tokens[2])


class Operator:
	def __init__(self):
		self.out_sequence = []
		self.input_file = openReadFile("-")
		self.field_num = 0

	def setOption(self,opt):
		if self.isFile(opt):
			self.input_file = openReadFile(opt)
			return

		params = Params(opt.split('.'))

		self.out_sequence.append(params)

	def isFile(self,opt):
		# ここではファイルとして扱う文字列を検出
		# .1.2など不正なオプションのチェックはあとで
		p = re.compile('^[0-9\.]+$')
		ret = p.match(opt)
		if ret != None: return False

		p = re.compile('^NF$')
		ret = p.match(opt)
		if ret != None: return False

		p = re.compile('^NF-[0-9\.]+$')
		ret = p.match(opt)
		if ret != None: return False

		return True

	def output(self,line):
		tokens = [line] + line.split(" ")
		#0: 一行全体 1以降: 各フィールド
		self.fieldSelect(tokens)

	def fieldSelect(self,tokens):
		print(" ".join(
			[ self.cutWord(tokens[f.num],f) for f in self.out_sequence ]
		))

	def cutWord(self,token,param):
		if param.start == None: return token

		token = token[param.start:]

		if param.length == None: return token

		return token[0:param.length]

	def cutWordJapan(self,token,start,length):
		pass

###########################################
#メイン関数
if __name__ == '__main__':

	if len(sys.argv) <= 1 : usage()
	if '--help' in sys.argv : usage()
	if '--version' in sys.argv : usage()

	operator = Operator()

	argv = sys.argv[1:]
	for opt in argv:
		operator.setOption(opt)

	sys.stdout = resetStdout()

	for line in operator.input_file:
		operator.output(line.rstrip())

	#ファイルの準備

	sys.exit(0)
