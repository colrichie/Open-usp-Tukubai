#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of tarr
#
# usage: [<test-path>/]tarr.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=tarr # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

###########################################
#TEST1

cat << FIN > $tmp-in
あ 1 い 2 う
FIN

cat << FIN > $tmp-ans
あ
1
い
2
う
FIN

${com} $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1.1 error"

cat $tmp-in		|
${com} > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1.2 error"

###########################################
#TEST2

cat << FIN > $tmp-in
001 あ 1 い 2 う
001 123 345
002 1 2
002 1 2 3
FIN

cat << FIN > $tmp-ans
001 あ
001 1
001 い
001 2
001 う
001 123
001 345
002 1
002 2
002 1
002 2
002 3
FIN

${com} num=1 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2.1 error"

cat $tmp-in	|
${com} num=1 -	> $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2.2 error"

###########################################
#TEST3

cat << FIN > $tmp-in
001 あ 1 い 2 う
001 2
001 123 345
002 1 2
002 1 2 3
FIN

cat << FIN > $tmp-ans
001 あ 1
001 い 2
001 う
001 2
001 123 345
002 1 2
002 1 2
002 3
FIN

${com} num=1 -2 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3 error"

###########################################
#TEST4 江頭泣き別れ問題

cat << FIN > $tmp-in
001 江頭 1 い 2 江頭
001 2
001 123 345
002 1 2
002 1 2 3
FIN

cat << FIN > $tmp-ans
001 江頭 1
001 い 2
001 江頭
001 2
001 123 345
002 1 2
002 1 2
002 3
FIN

${com} num=1 -2 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4 error"

rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
