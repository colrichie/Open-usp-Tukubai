#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of ycat
#
# usage: [<test-path>/]ycat.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=ycat # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

###########################################
#TEST1
# ふたつのfileの結合 出力の整形をする

cat << FIN > $tmp-file1
あいうえお
hoge
さしすせそ
FIN

cat << FIN > $tmp-file2
かきくけこ
FIN

cat << FIN > $tmp-out
あいうえお かきくけこ
hoge
さしすせそ
FIN

# 出力の整形
${com} $tmp-file1 $tmp-file2	|
sed 's/  */ /g'			|	# 連続空白は1個にする
sed 's/  *$//'	 > $tmp-ans	# 行末の空白は削除する

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1 error"

###########################################
#追加TEST1
# 3つのfileの結合 出力の整形はしない

cat << FIN > $tmp-file1
A
あいうえお


hoge1
FIN

cat << FIN > $tmp-file2
B

かきくけこ

hoge2
FIN

cat << FIN > $tmp-file3
C


さしすせそ
hoge3
FIN

cat << FIN > $tmp-out
A          B          C
あいうえお
           かきくけこ
                      さしすせそ
hoge1      hoge2      hoge3
FIN

#${com} $tmp-file1 $tmp-file2  $tmp-file3 >@4.txt
#${com2} $tmp-file1 $tmp-file2  $tmp-file3 >@4old.txt

${com} $tmp-file1 $tmp-file2  $tmp-file3 >$tmp-ans
[ $? -eq 0 ] ; ERROR_CHECK "追加TEST1-1 error"

# 標準入力を使用する

cat $tmp-file1 | \
${com} - $tmp-file2  $tmp-file3 >$tmp-ans

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "追加TEST1-2 error"

cat $tmp-file2 | \
${com} $tmp-file1 -  $tmp-file3 >$tmp-ans

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "追加TEST1-3 error"

cat $tmp-file3 | \
${com} $tmp-file1 $tmp-file2 -   >$tmp-ans

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "追加TEST1-4 error"

###########################################
#追加TEST2
# 文字列幅の判定を確認する

cat << FIN > $tmp-in1
0000000 吉田 50 F
0000001 𠮷田 50 F
0000003 今川 26 F
0000004 𫝆川 40 M
0000005 𫝆󠄁川 40 F
0000006 渡邊 50 F
0000007 渡邊󠄊 36 F
0000008 渡邊󠄋 62 F
0000009 渡邊󠄌 52 F
0000010 神山 38 F
0000011 神︀山 25 F
0000012 羽田 18 F
0000013 羽︀田 53 F
0000014 か゚き゚ 45 F
FIN

# $tmp-in1の説明
#吉田 #吉(U+5409)
#𠮷田 #𠮷(U+20BB7)代用対では𠮷(U+D842-U+DFB7)
#今川 #今(U+4ECA)
#𫝆川 #𫝆(U+2B746)代用対では𫝆(U+D86D-U+DF46)
#𫝆󠄁川 #IVSの例で𫝆󠄁(U+2B746_U+E0101)代用対では𫝆󠄁(U+D86D-U+DF46_U+DB40-U+DD01)
#渡邊 #邊(U+908A)
#渡邊󠄊 #IVSの例で邊󠄊(U+908A_U+E010A)代用対では邊󠄊(U+908A_U+DB40-U+DD0A)
#渡邊󠄋 #IVSの例で邊󠄋(U+908A_U+E010B)代用対では邊󠄋(U+908A_U+DB40-U+DD0B)
#渡邊󠄌 #IVSの例で邊󠄌(U+908A_U+E010C)代用対では邊󠄌(U+908A_U+DB40-U+DD0C)
#神山 #神(U+795E)
#神︀山 #SVSの例で神︀(U+795E_U+FE00)
#羽田 #羽(U+7FBD)
#羽︀田 #SVSの例で羽︀(U+7FBD_U+FE00)
#か゚き゚ #結合文字列の例でか゚(U+304B_U+309A)き゚(U+304D_U+309A)

# 文字の正しい表示には適切なfontの使用が求められる
# Unicode符号位置を「字(U+xxxx)」の形式で表現する（符号位置第が第2面のときは「字(U+xxxxx)」）
# 代用対は「字(U+xxxx-U+yyyy)」の形式で表現する
# 結合文字列/IVS/SVSは「字(U+xxxx_U+yyyy)」の形式で表現する

cat << FIN > $tmp-in2
91 59 20 76 54
46 39 8  5  21
30 50 71 36 30
58 71 20 10 6
82 79 16 21 80
33 56 27 40 72
51 30 15 22 81
72 39 26 18 55
33 48 33 33 25
64 67 40 21 36
45 36 5 16 72
76 75 22 32 25
47 64 43 7 2
88 43 9 37 62
FIN

cat << FIN > $tmp-out
0000000 吉田 50 F 91 59 20 76 54
0000001 𠮷田 50 F 46 39 8  5  21
0000003 今川 26 F 30 50 71 36 30
0000004 𫝆川 40 M 58 71 20 10 6
0000005 𫝆󠄁川 40 F 82 79 16 21 80
0000006 渡邊 50 F 33 56 27 40 72
0000007 渡邊󠄊 36 F 51 30 15 22 81
0000008 渡邊󠄋 62 F 72 39 26 18 55
0000009 渡邊󠄌 52 F 33 48 33 33 25
0000010 神山 38 F 64 67 40 21 36
0000011 神︀山 25 F 45 36 5 16 72
0000012 羽田 18 F 76 75 22 32 25
0000013 羽︀田 53 F 47 64 43 7 2
0000014 か゚き゚ 45 F 88 43 9 37 62
FIN

${com} $tmp-in1 $tmp-in2 > $tmp-ans

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "追加TEST2 error"

rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
