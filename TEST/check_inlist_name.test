#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of check_inlist_name
#
# usage: [<test-path>/]calclock.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=check_inlist_name # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

###########################################
# TEST1
# 通常のリスト内存在チェック

cat << FIN > $tmp-check
A /tmp/OS_FILE
B /tmp/ABC_FILE
FIN

cat << FIN > /tmp/OS_FILE
Linux     # comment
UNIX      # comment
Windows   # comment
FIN

cat << FIN > /tmp/ABC_FILE
abc   # comment
cde   # comment
FIN

cat << FIN > $tmp-data
A Linux
B_001 abc
B_002 cde
B_003 fgh
B_004 _
FIN

cat << FIN > $tmp-out
B_003 /tmp/ABC_FILE
FIN

${com} $tmp-check $tmp-data >$tmp-ans

rm -f /tmp/OS_FILE
rm -f /tmp/ABC_FILE

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1 error"

###########################################
# TEST2
# 複数チェック

cat << FIN > $tmp-check
A.B $tmp-list1
C $tmp-list2
FIN

cat << FIN > $tmp-list1
1 3  # comment
4 5  # comment
FIN

cat << FIN > $tmp-list2
5  # comment
6  # comment
7  # comment
FIN

cat << FIN > $tmp-data
A_01 1
A_02 2
B_01 3
B_02 4
C 1
FIN

cat << FIN > $tmp-out
A_02 B_02 $tmp-list1
C $tmp-list2
FIN

${com} $tmp-check $tmp-data >$tmp-ans
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2 error"

###########################################
# 追加TEST1
# 複数チェック（3項目）

cat << FIN > $tmp-check
D $tmp-list2
A.B.C $tmp-list1
FIN

cat << FIN > $tmp-list1
1 3 5 # comment
4 5 6 # comment
FIN

cat << FIN > $tmp-list2
5  # comment
6  # comment
7  # comment
FIN

cat << FIN > $tmp-data
A_01 1
D 5
A_02 2
B_01 3
B_02 4
C_01 5
C_02 6
FIN

cat << FIN > $tmp-out
A_02 B_02 C_02 $tmp-list1
FIN

${com} $tmp-check $tmp-data >$tmp-ans
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "追加TEST1 error"
###########################################

rm -f $tmp-*
echo "${pythonversion} ${name}" OK

exit 0
