#!/usr/bin/env python
#coding: utf-8
#
# han 半角変換フィルタ（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written by Yoshio Katayama
#
# The MIT License
#
# Copyright (C) 2011 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

_usage = "han <f1> <f2> .. <file>"
_usage1 = "han -d <string>"
_version = "Fri Oct 21 11:26:06 JST 2011"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"
_keypat = r'(\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?$'
		# 1: 1st field
		# 4: 2nd field

import re
import os
import sys

def error(msg, *arg):
	print('Error[han] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("        :", _usage1, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

class FieldLine:
	def __init__(self, line, allow_z = False):
		self.__allow_zero = allow_z
		line = line.rstrip('\n')
		self.__fields = [ line ]
		self.__fields += [ x for x in line.split(' ') if x ]

	def size(self):
		return len(self.__fields) - 1

	def getFieldNum(self, key):
		if type(key) == type(0):
			return key
		if re.match(r'\d+$', key):
			key = int(key)
		elif key == 'NF':
			key = self.size()
		else:
			key = self.size() - int(key[3:])
			if key <= 0:
				error("NF-x の x が大きすぎます。")
		if key < 0:
			error("フィールド番号が負です。")
		if key == 0 and not self.__allow_zero:
			error("フィールド番号が０です。")
		if key > self.size():
			error("フィールド番号が大きすぎます。")
		return key

	def getField(self, s, e = None):
		s = self.getFieldNum(s)
		if e == None:
			e = s
		else:
			e = self.getFieldNum(e)
		if s <= e:
			return ' '.join(self.__fields[s : e + 1])
		else:
			t = self.__fields[e : s + 1]
			t.reverse()
			return ' '.join(t)

#
# 入力ファイルオープン
#
def open_file(n, mode = 'r'):
	if n >= len(sys.argv):
		file = sys.stdin
	elif sys.argv[n] == '-':
		file = sys.stdin
		del sys.argv[n]
	else:
		try:
			file = open(sys.argv[n], mode)
			del sys.argv[n]
		except:
			file = None
	return file

#
# unicode 変換
#
def to_unicode(s):
	if sys.version_info >= (3, 0): return s	# Python3ではsには既にunicode文字列が入っている
	try:
		return unicode(s, 'utf_8')
	except:
		error("不当なマルチバイト文字が含まれています。")

# 文字列を付け足す
def concatstr(string,append):
	return string + append

# 全角→半角変換辞書を作成する
def makezenhandic():
	# Unicodeにおける半角/全角対応表にあらわれる文字/記号とこれをカタカナの濁音/半濁音に拡張した半角/全角対応表から辞書を作成する
	#zen=["！","＂","＃","＄","％","＆","＇","（","）","＊","＋","，","－","．","／","０","１","２","３","４","５","６","７","８","９","：","；","＜","＝","＞","？","＠","Ａ","Ｂ","Ｃ","Ｄ","Ｅ","Ｆ","Ｇ","Ｈ","Ｉ","Ｊ","Ｋ","Ｌ","Ｍ","Ｎ","Ｏ","Ｐ","Ｑ","Ｒ","Ｓ","Ｔ","Ｕ","Ｖ","Ｗ","Ｘ","Ｙ","Ｚ","［","＼","］","＾","＿","｀","ａ","ｂ","ｃ","ｄ","ｅ","ｆ","ｇ","ｈ","ｉ","ｊ","ｋ","ｌ","ｍ","ｎ","ｏ","ｐ","ｑ","ｒ","ｓ","ｔ","ｕ","ｖ","ｗ","ｘ","ｙ","ｚ","｛","｜","｝","～","｟","｠","。","「","」","、","・","ヲ","ァ","ィ","ゥ","ェ","ォ","ャ","ュ","ョ","ッ","ー","ア","イ","ウ","エ","オ","カ","キ","ク","ケ","コ","サ","シ","ス","セ","ソ","タ","チ","ツ","テ","ト","ナ","ニ","ヌ","ネ","ノ","ハ","ヒ","フ","ヘ","ホ","マ","ミ","ム","メ","モ","ヤ","ユ","ヨ","ラ","リ","ル","レ","ロ","ワ","ン","゛","゜","ㅤ","ㄱ","ㄲ","ㄳ","ㄴ","ㄵ","ㄶ","ㄷ","ㄸ","ㄹ","ㄺ","ㄻ","ㄼ","ㄽ","ㄾ","ㄿ","ㅀ","ㅁ","ㅂ","ㅃ","ㅄ","ㅅ","ㅆ","ㅇ","ㅈ","ㅉ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ","ㅏ","ㅐ","ㅑ","ㅒ","ㅓ","ㅔ","ㅕ","ㅖ","ㅗ","ㅘ","ㅙ","ㅚ","ㅛ","ㅜ","ㅝ","ㅞ","ㅟ","ㅠ","ㅡ","ㅢ","ㅣ","￠","￡","￢","￣","￣","￤","￥","￦","│","←","↑","→","↓","■","○"]
	#han=["!","\"","#","$","%","&","'","(",")","*","+",",","-",".","/","0","1","2","3","4","5","6","7","8","9",":",";","<","=",">","?","@","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","[","\\","]","^","_","`","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","{","|","}","~","⦅","⦆","｡","｢","｣","､","･","ｦ","ｧ","ｨ","ｩ","ｪ","ｫ","ｬ","ｭ","ｮ","ｯ","ｰ","ｱ","ｲ","ｳ","ｴ","ｵ","ｶ","ｷ","ｸ","ｹ","ｺ","ｻ","ｼ","ｽ","ｾ","ｿ","ﾀ","ﾁ","ﾂ","ﾃ","ﾄ","ﾅ","ﾆ","ﾇ","ﾈ","ﾉ","ﾊ","ﾋ","ﾌ","ﾍ","ﾎ","ﾏ","ﾐ","ﾑ","ﾒ","ﾓ","ﾔ","ﾕ","ﾖ","ﾗ","ﾘ","ﾙ","ﾚ","ﾛ","ﾜ","ﾝ","ﾞ","ﾟ","ﾠ","ﾡ","ﾢ","ﾣ","ﾤ","ﾥ","ﾦ","ﾧ","ﾨ","ﾩ","ﾪ","ﾫ","ﾬ","ﾭ","ﾮ","ﾯ","ﾰ","ﾱ","ﾲ","ﾳ","ﾴ","ﾵ","ﾶ","ﾷ","ﾸ","ﾹ","ﾺ","ﾻ","ﾼ","ﾽ","ﾾ","ￂ","ￃ","ￄ","ￅ","ￆ","ￇ","ￊ","ￋ","ￌ","ￍ","ￎ","ￏ","ￒ","ￓ","ￔ","ￕ","ￖ","ￗ","ￚ","ￛ","ￜ","¢","£","¬","¯","‾","¦","¥","₩","￨","￩","￪","￫","￬","￭","￮"]
	ascii_zen=[
		"　","！","＂","＃","＄","％","＆","＇","（","）","＊","＋","，","－","．","／",
		"０","１","２","３","４","５","６","７","８","９","：","；","＜","＝","＞","？",
		"＠","Ａ","Ｂ","Ｃ","Ｄ","Ｅ","Ｆ","Ｇ","Ｈ","Ｉ","Ｊ","Ｋ","Ｌ","Ｍ","Ｎ","Ｏ",
		"Ｐ","Ｑ","Ｒ","Ｓ","Ｔ","Ｕ","Ｖ","Ｗ","Ｘ","Ｙ","Ｚ","［","＼","］","＾","＿",
		"｀","ａ","ｂ","ｃ","ｄ","ｅ","ｆ","ｇ","ｈ","ｉ","ｊ","ｋ","ｌ","ｍ","ｎ","ｏ",
		"ｐ","ｑ","ｒ","ｓ","ｔ","ｕ","ｖ","ｗ","ｘ","ｙ","ｚ","｛","｜","｝","～"]
	kana_zen=[
		"。","「","」","、","・","ヲ","ァ","ィ","ゥ","ェ","ォ","ャ","ュ","ョ","ッ",
		"ー","ア","イ","ウ","エ","オ","カ","キ","ク","ケ","コ","サ","シ","ス","セ","ソ",
		"タ","チ","ツ","テ","ト","ナ","ニ","ヌ","ネ","ノ","ハ","ヒ","フ","ヘ","ホ","マ",
		"ミ","ム","メ","モ","ヤ","ユ","ヨ","ラ","リ","ル","レ","ロ","ワ","ン","゛","゜",
		# 濁音
		"ヴ",
		"ガ","ギ","グ","ゲ","ゴ",
		"ザ","ジ","ズ","ゼ","ゾ",
		"ダ","ヂ","ヅ","デ","ド",
		"バ","ビ","ブ","ベ","ボ",
		# 半濁音
		"パ","ピ","プ","ペ","ポ",
		# 鼻濁音	JISX0213-2004で定義されているがUnicodeでは合成用半濁点文字を使って合成する
		"カ゚","キ゚","ク゚","ケ゚","コ゚",
		"セ゚","ツ゚","ト゚",
		# 濁音	JISX0213-2004で定義されている
		"ヷ","ヺ"]
	hangul_zen=[
		"ㅤ","ㄱ","ㄲ","ㄳ","ㄴ","ㄵ","ㄶ","ㄷ","ㄸ","ㄹ","ㄺ","ㄻ","ㄼ","ㄽ","ㄾ","ㄿ",
		"ㅀ","ㅁ","ㅂ","ㅃ","ㅄ","ㅅ","ㅆ","ㅇ","ㅈ","ㅉ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ","ㅏ",
		"ㅐ","ㅑ","ㅒ","ㅓ","ㅔ","ㅕ","ㅖ","ㅗ","ㅘ","ㅙ","ㅚ","ㅛ","ㅜ","ㅝ","ㅞ","ㅟ",
		"ㅠ","ㅡ","ㅢ","ㅣ"]
	others_zen=[
		"｟","｠",
		"￠","￡","￢","￣","￣","￤","￥","￦",	# 「￣」（U+ffe3）はJISX0213-2004では全角マクロンと全角オーバーラインを包摂
		"│","←","↑","→","↓","■","○"]
		# 全角部に「￣」がふたつあるが辞書化したときは半角部（han）の「‾」半角オーバーライン（U+203e）の次の「¯」半角マクロン（U+00af）との組が有効になる
	ascii_han=[
		" ","!","\"","#","$","%","&","'","(",")","*","+",",","-",".","/",
		"0","1","2","3","4","5","6","7","8","9",":",";","<","=",">","?",
		"@","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
		"P","Q","R","S","T","U","V","W","X","Y","Z","[","\\","]","^","_",
		"`","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o",
		"p","q","r","s","t","u","v","w","x","y","z","{","|","}","~"]
	kana_han=[
		"｡","｢","｣","､","･","ｦ","ｧ","ｨ","ｩ","ｪ","ｫ","ｬ","ｭ","ｮ","ｯ",
		"ｰ","ｱ","ｲ","ｳ","ｴ","ｵ","ｶ","ｷ","ｸ","ｹ","ｺ","ｻ","ｼ","ｽ","ｾ","ｿ",
		"ﾀ","ﾁ","ﾂ","ﾃ","ﾄ","ﾅ","ﾆ","ﾇ","ﾈ","ﾉ","ﾊ","ﾋ","ﾌ","ﾍ","ﾎ","ﾏ",
		"ﾐ","ﾑ","ﾒ","ﾓ","ﾔ","ﾕ","ﾖ","ﾗ","ﾘ","ﾙ","ﾚ","ﾛ","ﾜ","ﾝ","ﾞ","ﾟ",
		# 濁音
		"ｳﾞ",
		"ｶﾞ","ｷﾞ","ｸﾞ","ｹﾞ","ｺﾞ",
		"ｻﾞ","ｼﾞ","ｽﾞ","ｾﾞ","ｿﾞ",
		"ﾀﾞ","ﾁﾞ","ﾂﾞ","ﾃﾞ","ﾄﾞ",
		"ﾊﾞ","ﾋﾞ","ﾌﾞ","ﾍﾞ","ﾎﾞ",
		# 半濁音
		"ﾊﾟ","ﾋﾟ","ﾌﾟ","ﾍﾟ","ﾎﾟ",
		# 鼻濁音
		"ｶﾟ","ｷﾟ","ｸﾟ","ｹﾟ","ｺﾟ",
		"ｾﾟ","ﾂﾟ","ﾄﾟ",
		# 濁音
		"ﾜﾞ","ｦﾞ"]
	hangul_han=[
		"ﾠ","ﾡ","ﾢ","ﾣ","ﾤ","ﾥ","ﾦ","ﾧ","ﾨ","ﾩ","ﾪ","ﾫ","ﾬ","ﾭ","ﾮ","ﾯ",
		"ﾰ","ﾱ","ﾲ","ﾳ","ﾴ","ﾵ","ﾶ","ﾷ","ﾸ","ﾹ","ﾺ","ﾻ","ﾼ","ﾽ","ﾾ","ￂ",
		"ￃ","ￄ","ￅ","ￆ","ￇ","ￊ","ￋ","ￌ","ￍ","ￎ","ￏ","ￒ","ￓ","ￔ","ￕ","ￖ",
		"ￗ","ￚ","ￛ","ￜ"]
	others_han=[
		"⦅","⦆",
		"¢","£","¬","‾","¯","¦","¥","₩",	# 「‾」半角オーバーライン（U+203e）と「¯」半角マクロン（U+00af）は別字
		"￨","￩","￪","￫","￬","￭","￮",
		]
	# 各ブロックを統合した変換辞書を作成する
	dic=dict(zip(map(to_unicode,ascii_zen+kana_zen+hangul_zen+others_zen),map(to_unicode,ascii_han+kana_han+hangul_han+others_han)))	# Python2のときはutf8からunicodeへ変換してからzip()
	# 上のdict()で「￣」（U+FFE3）全角マクロン（=全角オーバーライン）が「¯」（U+00af）半角マクロンに対応付けられたので「‾」（U+203e）半角オーバーラインに対応付ける修正をする
	dic[to_unicode("￣")]=to_unicode("‾")	# 「￣」（U+FFE3）全角オーバーライン（=全角マクロン）→「‾」（U+203e）半角オーバーライン

	return dic

def to_han(str,dic):	# 文字列を辞書にしたがって変換する
	s = ''
	ustr=to_unicode(str)
	ustrlen=len(ustr)
	i=0
	while i<ustrlen:
		if i<ustrlen-1:	# 2文字組をとることができるときは連続する2文字で検査する←合成文字のとき
			cc=ustr[i:i+2]
			if cc in dic:
				# 合成用濁点/半濁点は単独のprintでは見えないので要注意
				s=concatstr(s,dic[cc])
				i+=2	# 変換できたら次の1文字をskipする
				continue
		# 2文字組をとることができないかまたは2文字組による辞書引きで失敗した
		c=ustr[i]
		if c in dic:
			s=concatstr(s,dic[c])
		else:
			s=concatstr(s,c)
		i+=1

	if sys.version_info < (3, 0):	return s.encode('utf_8')	# Python2ならUTF8へ変換する
	else:	return s

#
# 直接入力文字列の前処理
#
#  Python3においてコマンドラインからの直接入力文字列中にUnicode符号位置がU+FFFFを超えるコードがあると
#  Unicode文字に正しく変換されない場合があることへの対処をする
def utf2ucs(instr):
	outstr=""	# 出力文字列
	intlist=[]	# 作業用整数リスト
	for char in instr:
		if ord(char)>=0xdc00 and ord(char)<=0xdcff:	# 文字の符号位置がU+DCxxの範囲にあったら「UTF8もどき」
			intlist.append(ord(char)-0xdc00)	# 0xdc00のげたをはずして整数リストに入れる
		else:	# 通常文字がきたら
			if len(intlist)>0:	# ここまでに「UTF8もどき」列を変換した整数リストがあったら
				# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
				outstr+= bytes(intlist).decode("utf_8")
				intlist=[]	# 整数リストを再初期化
			outstr+=char	# 新しくきた通常文字を出力文字列に追加
	# 「UTF8もどき」列を変換した整数リストが残っていたら
	# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
	if len(intlist)>0:	outstr+= bytes(intlist).decode("utf_8")
	return outstr

#
#メイン関数
#
if __name__ == '__main__':

	if len(sys.argv) > 1 \
	 and (sys.argv[1] == '--help' or sys.argv[1] == '--version'):
		usage()

	#
	# -d
	#
	if len(sys.argv) > 1:
		if sys.argv[1] == '-d':
			if len(sys.argv) != 3:
				usage()
			# 全角半角変換辞書を作り、変換を実行し、終了する
			dic=makezenhandic()
			str=sys.argv[2]
			if sys.version_info >= (3, 0):
				str=utf2ucs(sys.argv[2])	# Python3のときは直接入力文字列の前処理をする
			print(to_han(str,dic))
			sys.exit(0)
	else: usage()

	# 全角半角変換辞書を作る
	dic=makezenhandic()

	#
	# ファイル名のみ指定
	#
	if len(sys.argv) <= 2:
		file = open_file(1)
		if file:
			for line in file:
				print(to_han(line,dic),end='')
			sys.exit(0)

	#
	# 入力ファイルのオープン
	#
	file = open_file(len(sys.argv) - 1)
	if not file:
		file = sys.stdin

	#
	# メインループ
	#
	for line in file:
		line = FieldLine(line)
		nf = line.size()

		#
		#  フィールドの取得
		#
		key = []
		for arg in sys.argv[1:]:
			r = re.match(_keypat, arg)
			if not r:
				error("フィールド指定が正しくありません。")
			f1 = line.getFieldNum(r.group(1))
			if r.group(4):
				f2 = line.getFieldNum(r.group(4))
				if f1 > f2:
					error("フィールド位置が昇順になっていません。")
				key += list(range(f1, f2 + 1))
			else:
				key += [ f1 ]
		if max(key) > nf:
			error("フィールド番号が大きすぎます。")
		for x in zip(key, key[1:]):
			if x[0] >= x[1]:
				error("フィールド位置が昇順になっていません。")
		#
		# 半角変換
		#
		f = key[:]
		endchar=' '
		for i in range(1, nf + 1):
			if i==nf: endchar=''
			if not f or i < f[0]:
				print(line.getField(i), end=endchar)
				continue
			print(to_han(line.getField(i),dic), end=endchar)
			del f[0]
		print()

	sys.exit(0)
