#!/usr/bin/env python
#coding: utf-8
#
# cgi-name ＰＯＳＴメソッドによる変数と値を name 形式に変換する（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written by Yoshio Katayama
# 
# The MIT License
# 
# Copyright (C) 2011 Universal Shell Programming Laboratory
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

_usage = "cgi-name [-d<c>][-i<string>] <param_file>"
_option = "         [--template <html>]"
_version = "Fri Oct 21 11:26:06 JST 2011"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"

import re
import os
import sys
import base64

def error(msg, *arg):
	print('Error[check_need_name] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Option  :", _option, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

#
# 入力ファイルオープン
#
def open_file(n, quiet = False):
	if type(n) == type(0):
		if n >= len(sys.argv):
			n = '-'
		else:
			n = sys.argv[n]
	if n == '-':
		file = sys.stdin
	else:
		try:
			file = open(n)
		except:
			if not quiet:
				error("ファイル '%s' をオープンできません。", n)
			else:
				sys.exit(1)
	return file

#
# タグのエンドサーチ
#
def find_tag(str):
	if '/>' in str:
		l = str.index('/>') + 2
		s = str[:l]
		if re.search(r'\btype="(radio|checkbox)"', s):
			return l
	return None

#
# name の取り出し
#
def get_name(str):
	r = re.search('name="([^"]*)"', str)
	return r and r.group(1)

#
# <html> から name リストの取り出し
#
def template(fname):
	file = open_file(fname)
	str = file.read()
	name = []
	while '<input' in str:
		str = str[str.index('<input') + 6:]
		l = find_tag(str)
		if l:
			nm = get_name(str[:l])
			if nm:
				name += [ nm ]
			str = str[l:]
	return name

#
# name リストから変数を削除する
#
def del_name(name, n):
	n = re.sub(r'_\d+$', '', n)
	d = []
	for (i, x) in enumerate(name):
		if re.sub(r'_%\d+$', '', x) == n:
			d += [ i ]
	d.reverse()
	for i in d:
		del name[i]

#
# 直接入力文字列の前処理
#
#  Python3においてコマンドラインからの直接入力文字列中にUnicode符号位置がU+FFFFを超えるコードがあると
#  Unicode文字に正しく変換されない場合があることへの対処をする
def utf2ucs(instr):
	outstr=""	# 出力文字列
	intlist=[]	# 作業用整数リスト
	for char in instr:
		if ord(char)>=0xdc00 and ord(char)<=0xdcff:	# 文字の符号位置がU+DCxxの範囲にあったら「UTF8もどき」
			intlist.append(ord(char)-0xdc00)	# 0xdc00のげたをはずして整数リストに入れる
		else:	# 通常文字がきたら
			if len(intlist)>0:	# ここまでに「UTF8もどき」列を変換した整数リストがあったら
				# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
				outstr+= bytes(intlist).decode("utf_8")
				intlist=[]	# 整数リストを再初期化
			outstr+=char	# 新しくきた通常文字を出力文字列に追加
	# 「UTF8もどき」列を変換した整数リストが残っていたら
	# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
	if len(intlist)>0:	outstr+= bytes(intlist).decode("utf_8")
	return outstr

#
#メイン関数
#
if __name__ == '__main__':

	if len(sys.argv) > 1 \
	 and (sys.argv[1] == '--help' \
	  or sys.argv[1] == '--version') :
		usage()

	#
	# オプション解析
	#
	ltmpl = len('--template')
	name, null, blank = [], '', ' '
	while len(sys.argv) > 1:
		if len(sys.argv[1]) < 2 or sys.argv[1][0] != '-':
			break;
		if sys.argv[1][:ltmpl] == '--template':
			if sys.argv[1][ltmpl:] and sys.argv[1][ltmpl] == '=':
				name += template(sys.argv[1][ltmpl + 1:])
			elif len(sys.argv) > 2:
				name += template(sys.argv[2])
				del sys.argv[2]
			else:
				error("--template オプションの引数がありません。")
		elif sys.argv[1][1] == 'i':
			if sys.argv[1][2:]:
				null = sys.argv[1][2:]
			elif len(sys.argv) <= 2:
				error("-i オプションの引数がありません。")
			else:
				null = sys.argv[2]
				del(sys.argv[2])
		elif sys.argv[1][1] == 'd':	# 半角空白置換の指定
			blank = sys.argv[1][2:]
			if sys.version_info >= (3, 0):	# Python3なら
				blank=utf2ucs(blank)	# 直接入力文字列の前処理をする
		else:
			c = sys.argv[1][i]
			if c < '\x21' or c > '\x7e':
				c = hex(ord(c))
			print("不明なオプション文字です: %s" % c, file=sys.stderr)
			usage()
		del(sys.argv[1])

	#
	# 入力の解析
	#
	for token in re.split(r'[&\n\r]+', open_file(1, True).readline()):
		r = re.match(r'([^=]+)=(.*)', token)
		if r:
			print(r.group(1), end=' ')
			del_name(name, r.group(1))
			d = r.group(2)
			d = re.sub(r'\+', ' ', d)
			d = re.sub(r'%0D%0A', r'\\n', d)
			if sys.version_info >= (3, 0):
				d=re.sub(r'(%([0-9A-F]{2}))+', lambda x: str(base64.b16decode(re.sub(r'%', '', x.group(0))),"utf8","replace"),d)
			else:
				d = re.sub(r'%([0-9A-F]{2})', lambda x: chr(int(x.group(1), 16)), d)
			d = re.sub(r' ', blank, d)
			d = d or null
			if d:
				print(d, end='')
			print()

	#
	# 出力されなかった name を出力
	#
	for n in name:
		print(re.sub(r'_%\d+$', '', n), end=' ')
		if null:
			print(null, end='')
		print()

	sys.exit(0)
