#!/usr/bin/env python
#coding: utf-8
#
# join2 シーケンシャルマッチングジョイン（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written by Yoshio Katayama
#
# The MIT License
#
# Copyright (C) 2011 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

_usage = "join2 [-d<string>] key=<n> <master> <tran>"
_version = "Wed Oct 26 03:01:58 JST 2011"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"
_keypat = r'(\d+|NF(-\d+)?)(([/@](\d+|NF(-\d+)?))*)$'
		# 1: 1st field
		# 3: 2nd and later fields with separator
wide_class = ["W","F","A"]	# 全角文字クラス

import re
import os
import sys
import unicodedata

def error(msg, *arg):
	print('Error[join2] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	sys.exit(1)

class FieldLine:
	def __init__(self, line, allow_z = False):
		self.__allow_zero = allow_z
		line = line.rstrip('\n')
		self.__fields = [ line ]
		self.__fields += [ x for x in line.split(' ') if x ]

	def size(self):
		return len(self.__fields) - 1

	def getFieldNum(self, key):
		if type(key) == type(0):
			return key
		if re.match(r'\d+$', key):
			key = int(key)
		elif key == 'NF':
			key = self.size()
		else:
			key = self.size() - int(key[3:])
			if key <= 0:
				error("NF-x の x が大きすぎます。")
		if key < 0:
			error("フィールド番号が負です。")
		if key == 0 and not self.__allow_zero:
			error("フィールド番号が０です。")
		if key > self.size():
			error("フィールド番号が大きすぎます。")
		return key

	def getField(self, s, e = None):
		s = self.getFieldNum(s)
		if e == None:
			e = s
		else:
			e = self.getFieldNum(e)
		if s <= e:
			return ' '.join(self.__fields[s : e + 1])
		else:
			t = self.__fields[e : s + 1]
			t.reverse()
			return ' '.join(t)

	def getHead(self, n):
		pat = '( *([^ ]+ +){%d}[^ ]+)' % (n - 2)
		r = re.match(pat, self.__fields[0])
		return r.group(1)

	def getTail(self, n):
		pat = ' *([^ ]+ +){%d}[^ ]+ ?(.*)' % (n - 1)
		r = re.match(pat, self.__fields[0])
		return r.group(2)

#
# unicode 変換
#
def to_unicode(s):
	if sys.version_info >= (3, 0): return s	# Python3ではsには既にunicode文字列が入っている
	try:
		return unicode(s, 'utf_8')
	except:
		error("不当なマルチバイト文字が含まれています。")

#
# 代用対前半部の判定
#
def isHighSurrogate(cp):
	if 0xd800 <= cp and cp <= 0xdbff: return True
	else:                             return False

#
# 代用対後半部の判定
#
def isLowSurrogate(cp):
	if 0xdc00 <= cp and cp <= 0xdfff: return True
	else:                             return False

#
# UCS2の判定
#
def isUCS2():
	if sys.maxunicode==0xFFFF: return True
	else:                      return False

#
# unicodedata.east_asian_width()「東アジアの文字幅」の修正版
#
def east_asian_width(c):
	if len(c)>=2: return unicodedata.east_asian_width(c)	# UCS2で代用対が与えられたとき
	# unicodedata.east_asian_width()は半角オーバ－ライン「‾」（U+203e）に対して
	# A（Ambiguous; 曖昧=ギリシャ文字/ロシア文字と同様に全角扱いされる）を返すので
	# Na（Narrow; 狭=半角英数記号）に準ずるものと修正する
	elif ord(c)==0x203e: return 'Na'
	else:                return unicodedata.east_asian_width(c)

#
# 半角判定
#
def isHalfWidth(c):
	# 文字のEast_Asian_Width特性検査でFまたはWまたはAならば
	# F/W/A = Wide（全角英数記号） Full（漢字 ひらがな 全角カタカナ） Ambiguous（ロシア文字 ギリシャ文字）
	if east_asian_width(c) in wide_class: return False	# 全角
	else:                                 return True	# それ以外は半角

#
# 合成可能文字の判定
#
def isCombiningDiacriticalMark(cp):
	# unicodeにおける合成可能文字のブロック内か？
		#	0x3099 0x309a	仮名文字の合成可能濁点と合成可能半濁点
		#	0x0300-0x036F	ダイアクリティカルマーク（合成可能）
		#	0x1AB0-0x1AFF	ダイアクリティカルマーク（合成可能）拡張
		#	0x1DC0-0x1DFF	ダイアクリティカルマーク（合成可能）補助
		#	0x20D0-0x20FF	記号用ダイアクリティカルマーク（合成可能）
		#	0xFE20-0xFE2F	半記号（合成可能）
	if cp == 0x3099 or cp == 0x309a or \
		0x0300<=cp and cp <=0x036F or \
		0x1AB0<=cp and cp <=0x1AFF or \
		0x1DC0<=cp and cp <=0x1DFF or \
		0x20D0<=cp and cp <=0x20FF or \
		0xFE20<=cp and cp <=0xFE2F:
		return True
	else:	return False

#
# 異体字選択子（vaiation selector）の判定
#
def isVariationSelector(cp):
	# unicodeにおける異体字選択子のブロック内か？
		#	0xFE00-0xFE0F	Variation Selectors Supplement	字形選択子補助（SVS用）
		#	0xE0100-0xE01EF	Variation Selectors	字形選択子（IVS用）
	if  0xFE00<=cp  and cp <=0xFE0F or \
		0xE0100<=cp and cp <=0xE01EF:
		return True
	else:	return False

#
# 文字列の表示幅
#
def strwidth(s):
	wid = 0	# 表示幅の初期化
	s=string2list(to_unicode(s))
	# sは拡張文字列となった
	for xchar in s:
		if isHalfWidth(xchar[0]):	wid+=1	# 半角なら+1
		else:	wid+=2	# 全角なら+2
	return wid

#
# 文字列の分解
#
#	文字列を拡張文字の列に変換する	1文字が複数の符号位置であらわされている場合（代用対/結合文字/IVS/SVS）への対応
#		分解結果はリストとなり各要素（拡張文字）は
#			UCS2のときはリスト
#				[ 通常文字または文字列としての代用対 , 結合文字または異体字選択子（2バイトまたは代用対）または空文字 ]
#			UCS4のときは文字列
#				文字列（通常文字に結合文字または異体字選択子が付くことがある）
def string2list(s):
	StringList=[]
	if isUCS2():
		surrogate_pair=False	# UCS2では代用対（surrogate pair）がありうる
		prevchar=""
		for c in s:
			cp=ord(c)	# code point			
			# 代用対（[D800～DBFF]+[DC00～DFFF]のペア）の存在を考慮する
			if not surrogate_pair:	# 代用対の処理中でなければ
				if isHighSurrogate(cp):	# 代用対の前半部なら
					surrogate_pair=True	# surrogate pair starts
					HighSurrogate=c
					HighSurrogateCp=cp
					continue
				if isLowSurrogate(cp):	error("代用対の構成が無効です。")	# 代用対の後半部が単独で現れた
				elif isCombiningDiacriticalMark(cp):	# 合成可能文字なら
					if prevchar=="":	error("結合文字列の構成が無効です。")	# 空文字の次に合成可能文字が現われた
					StringList.append([prevchar,c])	# 先行文字と合成可能文字の組を追加（合成可能文字は第0面のみにある）
					prevchar=""
				elif isVariationSelector(cp):	# 異体字選択子なら
					if prevchar=="":	error("異体字列の構成が無効です。")	# 空文字の次に異体字選択子が現われた
					StringList.append([prevchar,c])	# 先行文字とSVS用異体字選択子（2バイト）の組を追加
					prevchar=""
				else:	# 次となる普通の文字がきたら先行文字を単独で追加
					if prevchar!="":
						StringList.append([prevchar,""])	# 先行文字と空文字の組を追加
					prevchar=c	# 先行文字とする
			elif isLowSurrogate(cp):	# 代用対の処理中に代用対の後半部がきたら代用対の完成
				surrogate_pair=False	# surrogate pair ends
				sp=HighSurrogate+c	# 代用対を作る
				uni = 0x10000 + (HighSurrogateCp - 0xD800) * 0x400 + (cp - 0xDC00);	# 代用対をdecodeする
				if isVariationSelector(uni):	# 代用対が異体字選択子なら
					if prevchar=="":	error("異体字列の構成が無効です。")	# 空文字の次に異体字選択子が現われた
					StringList.append([prevchar,sp])	# 先行文字とIVS用異体字選択子（4バイト）の組を追加
					prevchar=""
				else:	# 先行文字があって次に文字としての代用対が来た
					if prevchar!="":
						StringList.append([prevchar,""])	# 先行文字と空文字の組を追加
					prevchar=sp	# 代用対を先行文字とする
			else:	error("代用対の構成が無効です。")	# 代用対の前半部の次に代用対後半部以外が現われた
		if surrogate_pair: 	error("代用対の構成が無効です。")	# 代用対の前半部で文字列の終端に達した
		if prevchar!="":
			StringList.append([prevchar,""])	# 最後の先行文字と空文字の組を追加
	else:	# UCS4
		prevchar=""
		for c in s:
			cp=ord(c)	# code point
			if isCombiningDiacriticalMark(cp):	# 合成可能文字なら
				if prevchar=="":	error("結合文字列の構成が無効です。")	# 空文字の次に合成可能文字が現われた
				StringList.append(prevchar+c)	# 先行文字と合成可能文字の列を追加
				prevchar=""
			elif isVariationSelector(cp):	# 異体字選択子なら
				if prevchar=="":	error("異体字列の構成が無効です。")	# 空文字の次に異体字選択子が現われた
				StringList.append(prevchar+c)	# 先行文字とIVS用異体字選択子（4バイト）の列を追加
				prevchar=""
			else:
				if prevchar!="":	StringList.append(prevchar)	# 次となる普通の文字がきたら先行文字を単独で追加
				prevchar=c	# 先行文字とする
		if prevchar!="":
			StringList.append(prevchar)	# 最後の先行文字を追加
	return StringList

#
# 入力ファイルオープン
#
def open_file(n, mode = 'r'):
	if n >= len(sys.argv) or sys.argv[n] == '-':
		file = sys.stdin
	else:
		try:
			file = open(sys.argv[n], mode)
		except:
			error("ファイル %s をオープンできません。", sys.argv[n])
	return file

#
# key= の解析
#
def getkey(line, arg):
	k = re.match('key=' + _keypat, arg)
	if k == None:
		error("key 引数が正しくありません。");
	key = [ line.getFieldNum(k.group(1)) ]
	while k.group(3) != '':
		sep = k.group(3)[0]
		str = k.group(3)[1:]
		k = re.match(_keypat, str)
		n = line.getFieldNum(k.group(1))
		if sep == '@':
			key += [ n ]
		elif key[-1] <= n:
			key += list(range(key[-1] + 1, n + 1))
		else:
			key += list(range(key[-1] - 1, n - 1, -1))
	key=sorted(set(key),key=key.index) # 集合化によってリストの重複を解消し元のリストにおける出現位置をキーとしてsort
	return key

#
# ダミー文字列の生成←キーフィールドが不連続である場合を考慮する
#
def make_dummy(line, s, e, key, dstr):	# キーフィールド番号リストを与える
	nonkey=list(set(range(1,line.size()+1))-set(key))	# 非キーフィールド番号リスト
	if dstr:
		dummy = [ dstr ] * len(nonkey)
	else:
		dummy = [ '*' * strwidth(line.getField(i)) for i in nonkey ]
	return ' '.join(dummy)

#
# tran の後始末
#
def flush_tran(tran, tline):
	print(tline.getField(0))
	for tline in tran:
		print(tline, end=' ')
	sys.exit(0)

#
# キー文字列の抽出
#
def keystr(line, key):
	return ' '.join(map(line.getField, key))

#
# 非キー文字列の抽出
#
def nonkeystr(line, key):
	return ' '.join(map(line.getField, list(set(range(1,line.size()+1))-set(key))))

#
# 結合して出力
#
def put_ok_line(tline, ks, ke, mline, mkey):	# masterのキーフィールド番号リストを与える
	print(tline.getHead(ke+1),end='')	# tranの先頭からキーリスト終了番号までのフィールドを出力
	mnkstr=nonkeystr(mline, mkey)	# masterの非キーフィールドを連結文字列として取得
	if len(mnkstr)>0: print(' '+mnkstr,end='')	# もしmasterの非キーフィールドがあれば出力
	if ke < tline.size(): print(' '+tline.getTail(ke),end='')	# もしtranに最終キー位置より後のフィールドがあれば出力
	print()	# 改行して終り

#
# ダミー文字列で補完して出力
#
def put_ng_line(tline, ks, ke, dummy):
	print(tline.getHead(ke+1),end='')	# tranの先頭からキーリスト終了番号までのフィールドを出力
	if len(dummy)>0: print(' '+dummy,end='')	# もしmasterの非キーフィールド相当のdummy文字列があれば出力
	if ke < tline.size(): print(' '+tline.getTail(ke),end='')	# もしtranに最終キー位置より後のフィールドがあれば出力
	print()	# 改行して終り

#
# 直接入力文字列の前処理
#
#  Python3においてコマンドラインからの直接入力文字列中にUnicode符号位置がU+FFFFを超えるコードがあると
#  Unicode文字に正しく変換されない場合があることへの対処をする
def utf2ucs(instr):
	outstr=""	# 出力文字列
	intlist=[]	# 作業用整数リスト
	for char in instr:
		if ord(char)>=0xdc00 and ord(char)<=0xdcff:	# 文字の符号位置がU+DCxxの範囲にあったら「UTF8もどき」
			intlist.append(ord(char)-0xdc00)	# 0xdc00のげたをはずして整数リストに入れる
		else:	# 通常文字がきたら
			if len(intlist)>0:	# ここまでに「UTF8もどき」列を変換した整数リストがあったら
				# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
				outstr+= bytes(intlist).decode("utf_8")
				intlist=[]	# 整数リストを再初期化
			outstr+=char	# 新しくきた通常文字を出力文字列に追加
	# 「UTF8もどき」列を変換した整数リストが残っていたら
	# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
	if len(intlist)>0:	outstr+= bytes(intlist).decode("utf_8")
	return outstr

#
#メイン関数
#
if __name__ == '__main__':

	if len(sys.argv) < 3 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	#
	# -d<string> / +<string>
	#
	if sys.argv[1][0] == '+':
		dstr = sys.argv[1][1:]
		del sys.argv[1]
		if len(sys.argv) < 3:
			usage()
	elif sys.argv[1][0:2] == '-d':
		dstr = sys.argv[1][2:]
		del sys.argv[1]

		if len(sys.argv) < 3:
			usage()
	else:
		dstr = ''

	if dstr != '' and sys.version_info >= (3, 0):
		dstr=utf2ucs(dstr)	# Python3のときは直接入力文字列の前処理をする

	mast = open_file(2)
	tran = open_file(3)

	#
	# １行入力
	#
	tline = tran.readline()
	if not tline:
		sys.exit(0)
	tline = FieldLine(tline)

	mline = mast.readline()
	if not mline:
		flush_tran(tran, tline)
	mline = FieldLine(mline)

	#
	# key=
	#
	if sys.argv[1][:4] != 'key=':
		usage()
	tkey = getkey(tline, sys.argv[1])
	ks = min(tkey)
	ke = max(tkey)
	mkey = [ t - ks + 1 for t in tkey ]

	tkstr = keystr(tline, tkey)
	mkstr = keystr(mline, mkey)

	#
	# ダミー文字列の生成
	#
	dummy = make_dummy(mline, ke - ks + 2, mline.size(), mkey, dstr)	# masterのキーフィールド番号リストを与える

	#
	# メインループ
	#
	while True:
		while tkstr > mkstr:
			mline = mast.readline()
			if not mline:
				put_ng_line(tline, ks, ke, dummy)
				for tline in tran:
					tline = FieldLine(tline)
					put_ng_line(tline, ks, ke, dummy)
				sys.exit(0)
			mline = FieldLine(mline)
			dummy = make_dummy(mline, ke - ks + 2, mline.size(), mkey, dstr)	# dummy文字列の再生成
			mkstr = keystr(mline, mkey)
		if tkstr == mkstr:
			put_ok_line(tline, ks, ke, mline, mkey)	# mkeyを与える
		else:
			put_ng_line(tline, ks, ke, dummy)
		tline = tran.readline()
		if not tline:
			sys.exit(0)
		tline = FieldLine(tline)
		tkstr = keystr(tline, tkey)
