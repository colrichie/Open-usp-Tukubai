#!/usr/bin/env python
#coding: utf-8
#
# join1x : キーの値が同じレコードが複数存在するファイル同士を連結（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
#
# The MIT License
#
# Copyright (C) 2011 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function
import sys
import os

_usage = "join1x [+ng[<fd>]] key=<n> <master> [<tran>]"
_version = "Fri Oct 21 11:26:06 JST 2011"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"

def error(msg, *arg):
	print('Error[join1x] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

# ファイルオープン
def open_file(filename, mode = 'r'):
	# 入力でファイル名が'-'または省略なら標準入力とする
	if mode=="r" and (filename=='-' or filename == None): 
		file = sys.stdin
	elif mode=="w": # 出力ファイルのとき（ngファイルに対してはファイル名は数字で与えられる）
		file=os.fdopen(int(filename),mode) # ファイル名を整数化してファイルディスクリプタにする
	else: # その他のとき
		try:
			file = open(filename, mode)
		except:
			error("ファイル '%s' をオープンできません", filename)
	return file

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip('\n').rstrip('\r')

# （NFを含むかもしれない）フィールド要素を整数に変換する
def intwithNF(str,NF):
	# フィールド要素にNFを含むとき
	if str=="NF":
		return NF
	elif str.startswith("NF-"):
		str=str[3:]
		try:
			fieldnum=NF-int(str)
		except:
			error("キー指定のNF-n形式が不正です")
	# NFを含まないとき
	else:
		try:
			fieldnum=int(str)
		except:
			error("キー指定が整数ではありません")
	if fieldnum<=0:
		error("キー指定が0または負数です")
	if fieldnum>NF:
		error("フィールド指定がレコードのフィールド数を超えています")
	return fieldnum

# フィールド指定文字列からフィールドリストを作る（NFは確定値が渡されてくる）
def GetKeyList(key,NF):
	keylist=[]
	# <n1/n2>形式
	if "/" in key:
		keystrlist=key.split("/")
		if len(keystrlist)>2:
			error("フィールド指定が不正です")
		for str in keystrlist:
			keylist.append(intwithNF(str,NF))
		if keylist[0]<keylist[1]: # 昇順のとき
			keylist=list(range(keylist[0],keylist[1]+1))
		else: # 降順のとき
			keylist=list(range(keylist[0],keylist[1]-1,-1))
	#  <n1@n2@...>形式
	elif "@" in key:
		keystrlist=key.split("@")
		for str in keystrlist:
			keylist.append(intwithNF(str,NF))
	#  <n>形式
	else:
		keylist.append(intwithNF(key,NF))
	# キーリストの重複解消
	keylist=sorted(set(keylist),key=keylist.index) # 集合化によってリストの重複を解消し元のリストにおける出現位置をキーとしてsort
	return keylist

# tranのキーリストからmasterのキーリストを得る
def GetMasterKeyList(keylist):
	masterkeylist=[]
	delta=min(keylist)-1 # masterkeylistの最小値を1とするためのkeylistからのスライド量
	for i in range(len(keylist)):
		masterkeylist.append(keylist[i]-delta)
	return masterkeylist

# キーフィールド番号リストをもとにレコードからキーフィールド値リスト（連結文字列）をとりだす
def GetKeyFieldValues(line,keylist,Separator):
	keyvalues=""
	for i in keylist:
		keyvalues+=line[i-1]+Separator # フィールド区切りを付ける
	return keyvalues.rstrip()

# 出力行の作成
def MakeLine(fields,start,end,Separator):
	outputline=""
	if start>end:
		return ""
	if start==end:
		return fields[start-1]
	for i in range(start,end+1):
		outputline+=fields[i-1]+Separator
	return outputline.rstrip()

# 非キーフィールドのリストを作成
def GetNonKeyFields(keyfieldlist,keyfieldvalues,maxkeyfieldpos):
	list=[]
	for i in range(1,maxmasterkeypos+1):
		if not i in keyfieldlist:
			list.append(keyfieldvalues[i-1])
	return list

# main

if __name__ == '__main__':

	master,tran,ng,key,nf = "", "-", False, None, False # default値

	# コマンドの説明表示
	if len(sys.argv) <= 1 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	# パラメータ解析
	numparam=0
	minparam=1
	maxparam=3
	while len(sys.argv) > 1:
		if sys.argv[1].startswith("+ng"): # +ngパラメータ
			if ng:
				error("+ngパラメータが重複しています")
			ng=True
			ngnum=sys.argv[1]
			ngnum=ngnum[3:]
		elif sys.argv[1].startswith("key="): # keyパラメータ
			if key:
				error("keyパラメータが重複しています")
			key=sys.argv[1][4:]
		else:
			numparam+=1
			if numparam==1: # master
				master=sys.argv[1]
			elif numparam==2: # tran
				tran=sys.argv[1]
		del(sys.argv[1]) # popup

	# パラメータ検査
	if numparam<minparam:
		error("パラメータの数が足りません")
	if numparam>maxparam:
		error("パラメータの数が多すぎます")

	if ng: # +ngオプションがあるとき
		if ngnum=="":
			ngnum="2" # defaultは標準エラー出力
		try:
			ngout=int(ngnum)
		except:
			error("不正な+ng指定です")
		if ngout<2:
			error("不正な+ng指定です")

	# <master>と<tran>の名前検査
	if master==tran:
		error("<master>と<tran>が同じです")

	# masterファイルを開く
	masterfile=open_file(master)
	# tranファイルを開く
	tranfile=open_file(tran)
	# ngファイルを開く
	if ng: ngfile=open_file(ngout,"w")

	Separator=" "
	masterfilelines=[]
	# masterファイルをすべて読み込む
	numfields=-1
	for line in masterfile:
		line=rm_eol(line)
		fields=line.split()
		if not len(fields)==numfields and not numfields<0:
			error("masterファイルのフィールド数が一定ではありません")
		numfields=len(fields)
		masterfilelines.append(fields) # 全フィールドを記憶する
	if len(masterfilelines)==0:
		error("masterファイルが空です")

	linecount=0
	# tranのloop
	for line in tranfile: # tranファイルを読む
		line=rm_eol(line)
		tranfields=line.split()
		# tranの最初のレコードでtranの最終フィールド位置を確認しキーリストを確定する
		if linecount==0:
			NF=len(tranfields)
			# key指定の文字列からtranのキーリストへ変換
			keylist=GetKeyList(key,NF)
			# masterのキーリストを作成
			masterkeylist=GetMasterKeyList(keylist)
			# masterとtranの最大キー位置を求める
			maxmasterkeypos=max(masterkeylist)
			maxtrankeypos=max(keylist)
		elif len(tranfields)!=NF:
			error("tranファイルのフィールド数が一定ではありません")
		trankeyfieldvalues=GetKeyFieldValues(tranfields,keylist,Separator)
		hitcount=0
		numtodel=0
		# masterのloop
		for masterfields in masterfilelines: # masterの行（フィールドリスト）を見る
			masterkeyfieldvalues=GetKeyFieldValues(masterfields,masterkeylist,Separator)
			# masterのキーがtranのキーにとどかなかったら
			if masterkeyfieldvalues<trankeyfieldvalues:
				numtodel+=1 # masterから削除すべき要素としてcount
			# masterのキーがtranのキーと一致したら
			elif masterkeyfieldvalues==trankeyfieldvalues:
				hitcount+=1
				# tranの最大キー位置まで出力
				outputline=MakeLine(tranfields,1,maxtrankeypos,Separator)+Separator
				# masterの最大キー位置の前の非キーフィールドを出力
				#  （出力しない場合は次の3行を抑止する）
				masternonkeyfieldvalues=GetNonKeyFields(masterkeylist,masterfields,maxmasterkeypos)
				if len(masternonkeyfieldvalues)>0:
					outputline+=MakeLine(masternonkeyfieldvalues,1,len(masternonkeyfieldvalues),Separator)+Separator
				# masterの最大キー位置の後のフィールドを出力
				outputline+=MakeLine(masterfields,maxmasterkeypos+1,len(masterfields),Separator)+Separator
				# tranの最大キー位置の後のフィールドを出力
				outputline+=MakeLine(tranfields,maxtrankeypos+1,len(tranfields),Separator)
				print(outputline)
			# masterのキーがtranのキーをこえたら
			else:
				break # masterはソートされているのでここでmasterのloopを脱出
		if numtodel>0:# masterのキーのうちtranの今の行のキーにとどかなかった要素があれば
			del masterfilelines[0:numtodel] # masterの先頭から削除
		if ng: # ng指定があるときはtranのloopを最後まで実行する
			if hitcount==0: # tranのこの行がmasterのどの行ともキーが一致しなかったら
				# 出力ファイルへtranの行を出力
				print(MakeLine(tranfields,1,len(tranfields),Separator),file=ngfile)
		else: # ng指定がないとき
			if len(masterfilelines)==0: break # masterがなくなったらtranのloopを脱出する
		linecount+=1

	# masterファイルを閉じる
	masterfile.close()
	# tranファイルを閉じる
	tranfile.close()

	# 終了
	sys.exit(0)
