#!/usr/bin/env python
#coding: utf-8
#
# block_getlast : 同一キーをもつレコードから、参照キーが同じ最終ブロックをすべて出力する（Open usp Tukubai版）
#
# designed by Nobuaki Tounaka
#
# The MIT License
#
# Copyright (C) 2011 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function
import sys

_usage = "block_getlast key=<key> ref=<ref> [<file>]"
_version = "Fri Oct 21 11:26:06 JST 2011"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"

def error(msg, *arg):
	print('Error[block_getlast] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

# ファイルオープン
def open_file(filename, mode = 'r'):
	# 入力でファイル名が'-'または省略なら標準入力とする
	if mode=="r" and (filename=='-' or filename == None): 
		file = sys.stdin
	else: # その他の入力ファイルのとき
		try:
			file = open(filename, mode)
		except:
			error("ファイル '%s' をオープンできません。", filename)
	return file

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip('\n').rstrip('\r')

# （NFを含むかもしれない）フィールド要素を整数に変換する
def intwithNF(str,NF):
	# フィールド要素にNFを含むとき
	if str=="NF":
		return NF
	elif str.startswith("NF-"):
		str=str[3:]
		try:
			fieldnum=NF-int(str)
		except:
			error("キー指定のNF-n形式が不正です")
	# NFを含まないとき
	else:
		try:
			fieldnum=int(str)
		except:
			error("キー指定が整数ではありません")
	if fieldnum<=0:
		error("キー指定が0または負数です")
	if fieldnum>NF:
		error("フィールド指定がレコードのフィールド数を超えています")
	return fieldnum

# フィールド指定文字列からフィールドリストを作る（NFは確定値が渡されてくる）
def GetKeyList(key,NF):
	keylist2=[]
	keylist=[]
	# <n1/n2>形式
	if "/" in key:
		keystrlist=key.split("/")
		if len(keystrlist)>2:
			error("フィールド指定が不正です")
		for str in keystrlist:
			keylist.append(intwithNF(str,NF))
		if keylist[0]<keylist[1]: # 昇順のとき
			keylist=list(range(keylist[0],keylist[1]+1))
		else: # 降順のとき
			keylist=list(range(keylist[0],keylist[1]-1,-1))
	#  <n1@n2@...>形式
	elif "@" in key:
		keystrlist=key.split("@")
		for str in keystrlist:
			keylist.append(intwithNF(str,NF))
	#  <n>形式
	else:
		keylist.append(intwithNF(key,NF))
	return keylist

# キーフィールドリストをもとにレコードからキーフィールド値リストをとりだす
def GetKeyFieldValues(line,keylist):
	keyvaluelist=[]
	for i in keylist:
		keyvaluelist.append(line[i-1])
	return keyvaluelist

# main

if __name__ == '__main__':

	filename,key,ref = "-", "", "" # default値/初期値

	# コマンドの説明表示
	if len(sys.argv) <= 1 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	# パラメータ解析
	numparam=0
	while len(sys.argv) > 1:
		if sys.argv[1].startswith("key="): # keyパラメータ
			if key !="":
				error("keyパラメータが重複しています")
			key=sys.argv[1][4:]
		elif sys.argv[1].startswith("ref="): # keyパラメータ
			if ref!="":
				error("refパラメータが重複しています")
			ref=sys.argv[1][4:]
		else:
			numparam+=1
			if numparam==1: # file
				filename=sys.argv[1]
			else:
				error("ファイル指定が複数あります")
		del(sys.argv[1]) # popup

	# パラメータ検査
	if key=="":
		error("keyパラメータがありません")
	if ref=="":
		error("refパラメータがありません")

	file=open_file(filename) # 入力ファイルを開く

	last_block=[] # 同じkey値でref値一定の最終ブロック
	linecount=0
	for line in file: # 入力ファイルを読む
		line=rm_eol(line)
		fields=line.split()
		# 入力ファイルの最初のレコードで最終フィールド位置を確認しkeyリストとrefリストを確定する
		# （keyリストとrefリストはフィールド番号のリスト）
		if linecount==0:
			NF=len(fields)
			keylist=GetKeyList(key,NF) # key指定の文字列からkeyリストへ変換
			reflist=GetKeyList(ref,NF) # ref指定の文字列からrefリストへ変換
			# 現在のプロックのkey値とref値を設定する
			current_keyfieldvalues=GetKeyFieldValues(fields,keylist) # key値
			current_reffieldvalues=GetKeyFieldValues(fields,reflist) # ref値
		if len(fields)!=NF and linecount>1:
			error("入力ファイルのフィールド数が一定ではありません")
		# 行のkey値とref値を求める
		keyfieldvalues=GetKeyFieldValues(fields,keylist) # key値
		reffieldvalues=GetKeyFieldValues(fields,reflist) # ref値
		# key値が変化したら
		if  keyfieldvalues != current_keyfieldvalues:
			# 新しいプロックのkey値とref値を記憶する
			current_keyfieldvalues = keyfieldvalues # key値
			current_reffieldvalues = reffieldvalues # ref値
			# key値が一定でref値が同じ行の最後のブロックを出力してからclearする
			for outputline in last_block:
				print(outputline)
			del last_block[:]  # これまでの同じkey値のref値が同じ行の最終ブロックをclearする
		# ref値が変化したら
		elif reffieldvalues != current_reffieldvalues:
			current_reffieldvalues = reffieldvalues # 新しいref値を記憶する
			del last_block[:]  # これまでの同じkey値のref値が同じ行の最終ブロックをclearする
		# 同じkey値の同じref値の行としてブロックへ集積する
		last_block.append(line)
		linecount+=1

	# EOFに達したので未出力の最終ブロックを出力する
	for outputline in last_block:
		print(outputline)

	file.close() # 入力ファイルを閉じる

	# 終了
	sys.exit(0)
